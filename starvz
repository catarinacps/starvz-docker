#!/bin/sh

# robust script
set -euo pipefail

usage() {
cat <<EOF
COMMAND:
  $0 [OPTIONS] <DIRECTORY>                                                       

  WHERE <DIRECTORY> is the path to the directory containing the fxt traces  

  WHERE [OPTIONS] can be any of the following, in no particular order:             
    -h | --help                                                                   
      shows this message and exits                                                 
    -i | --image=image_name:tag                                                    
      use a remote image instead of the default $DEFAULT_IMAGE                     
    -t | --tarball=path/to/the/image.tar.gz                                        
      use an image tarball instead of the default $DEFAULT_IMAGE                   
EOF
}

for i in "$@"; do
    case $i in
        -h|--help)
            echo "USAGE:"
            echo
            usage

            exit
            ;;
        --image=*)
            IMAGE_NAME="${i#*=}"
            shift
            ;;
        -i)
            shift
            IMAGE_NAME="$1"
            shift
            ;;
        --tarball=*)
            UNPRIVILEGED=true
            IMAGE_PATH="${i#*=}"
            shift
            ;;
        -t)
            UNPRIVILEGED=true
            shift
            IMAGE_PATH="$1"
            shift
            ;;
    esac
done

DIR_PATH="$1"

if [ ! -d "$DIR_PATH" ]; then
    echo "Given parameter is not a directory."
    echo "Please refer to the following usage example:"
    echo
    usage

    exit
fi

if [ "$UNPRIVILEGED" = true ]; then
    if [ ! -f "$IMAGE_PATH" ] || [ ! ${IMAGE_PATH: -7} == ".tar.gz" ]; then
        echo "ERROR: Given path isn't to a .tar.gz file"

        exit
    else
        echo "--> Unpacking tarball..."

        ch-tar2dir "$IMAGE_PATH" /var/tmp
        IMAGE_NAME=$(basename "$IMAGE_PATH" .tar.gz)
    fi
elif [ -z $(sudo docker images -q "$IMAGE_NAME") ] && [ "$IMAGE_PATH" == "$DEFAULT_IMAGE" ]; then
    echo "--> Image not found, pulling from repository..."
    sudo docker pull "$IMAGE_PATH"

elif [ -z $(sudo docker images -q "$IMAGE_NAME") ]; then
    echo "ERROR: Image not found, be sure that your image exists..."

    exit
fi


if [ "$UNPRIVILEGED" = true ]; then
    echo "--> Using unprivileged mode..."

    ch-run /var/tmp/$IMAGE_NAME -- phase1-workflow.sh $DIR_PATH application

    rm -rf /var/tmp/$IMAGE_NAME
else
    echo "--> Using privileged mode..."

    sudo docker run -dit \
         --name=trace_analysis \
         --mount type=bind,source=$DIR_PATH,target=/scratch \
         $IMAGE_NAME bash > /dev/null 2>&1

    sudo docker exec \
         --workdir / \
         trace_analysis \
         phase1-workflow.sh /scratch application

    sudo docker container stop trace_analysis > /dev/null 2>&1

    sudo docker container rm trace_analysis > /dev/null 2>&1
fi
